# 12/09/18

-     Leitura do enunciado do trabalho 1 de SISOP:
Notas sobre pontos importantes:

* Biblioteca de threads N:1 (cthread):
criação, execução, sync, término, troca de contextos.

* Funções que usam chamadas de sistema existentes no Linux:
makecontext()
setcontext()
getcontext()
swapcontext()

* Quantidade variável de threads: alocação dinâmica de memória (mconf feelings)

* tid único por thread:
- inteiro positivo de 32 bits (int 4 bytes)
- não será necessário reaproveitar tid

* Eventos que colocam threads no estado apto:
1 - ccreate
2 - cyield
3 - após um csignal para uma thread que estava blocked por cwait
4 - quando uma thread está blocked por cjoin esperando uma thread2, e esta
terminar
5 - preempção por prioridade

* Condições que tiram uma thread de executando:
indo para apto:
1 - cyield
2 - ccreate criando uma thread de maior prioridade
3 - csetprio que diminua sua prioridade para uma prioridade menor do que a de
uma thread que esteja apta
4 - csignal que causa o desbloqueio de uma thread de maior prioridade
indo para bloqueado:
5 - cjoin
6 - cwait
indo para término:
7 - return ou fm da função que executava

* Eventos que colocam uma thread em blocked:
1 - cjoin
2 - cwait (uso de recurso protegido por semáforo)

* Escalonador FIFO PREEMPTIVO POR PRIORIDADE
Três níveis de prioridade: baixo, médio e alto.

* Respeitar rigorosamente a API indicada no enunciado.

* Possuir códigos de erro para primitivas não funcionais ou não implementadas.

* Anotações das funções no próprio cthread.c
